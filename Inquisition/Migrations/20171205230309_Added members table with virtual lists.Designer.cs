// <auto-generated />
using Inquisition.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Inquisition.Migrations
{
    [DbContext(typeof(InquisitionContext))]
    [Migration("20171205230309_Added members table with virtual lists")]
    partial class Addedmemberstablewithvirtuallists
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Inquisition.Data.Game", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("Args");

                    b.Property<string>("ExeDir");

                    b.Property<bool>("IsOnline");

                    b.Property<string>("Port")
                        .HasMaxLength(10);

                    b.Property<string>("Version")
                        .HasMaxLength(10);

                    b.HasKey("Name");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Inquisition.Data.Joke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("MemberIdId");

                    b.Property<int>("NegativeVotes");

                    b.Property<int>("PositiveVotes");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("MemberIdId");

                    b.ToTable("Jokes");
                });

            modelBuilder.Entity("Inquisition.Data.Member", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastSeenOnline");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Inquisition.Data.Meme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("MemberIdId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("MemberIdId");

                    b.ToTable("Memes");
                });

            modelBuilder.Entity("Inquisition.Data.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DueDate");

                    b.Property<TimeSpan>("Duration");

                    b.Property<string>("MemberIdId");

                    b.Property<string>("Message");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MemberIdId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Inquisition.Data.Joke", b =>
                {
                    b.HasOne("Inquisition.Data.Member", "MemberId")
                        .WithMany("Jokes")
                        .HasForeignKey("MemberIdId");
                });

            modelBuilder.Entity("Inquisition.Data.Meme", b =>
                {
                    b.HasOne("Inquisition.Data.Member", "MemberId")
                        .WithMany("Memes")
                        .HasForeignKey("MemberIdId");
                });

            modelBuilder.Entity("Inquisition.Data.Reminder", b =>
                {
                    b.HasOne("Inquisition.Data.Member", "MemberId")
                        .WithMany("Reminders")
                        .HasForeignKey("MemberIdId");
                });
#pragma warning restore 612, 618
        }
    }
}
